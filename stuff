  Serial3.print("Accel X: "); Serial.print(accelX_g, 3);  // Print with 3 decimal places
  Serial3.print(" | Y: "); Serial.print(accelY_g, 3);
  Serial3.print(" | Z: "); Serial.println(accelZ_g, 3);
  
  Serial3.print("Gyro X: "); Serial.print(gyroX_dps, 2);  // Print with 2 decimal places
  Serial3.print(" | Y: "); Serial.print(gyroY_dps, 2);
  Serial3.print(" | Z: "); Serial.println(gyroZ_dps, 2);


error: externally-managed-environment

× This environment is externally managed
╰─> To install Python packages system-wide, try apt install
    python3-xyz, where xyz is the package you are trying to
    install.
    
    If you wish to install a non-Debian-packaged Python package,
    create a virtual environment using python3 -m venv path/to/venv.
    Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make
    sure you have python3-full installed.
    
    For more information visit http://rptl.io/venv



import serial
import json
import time
import matplotlib.pyplot as plt

# Configure UART
serial_port = "/dev/ttyAMA0"  # UART port
baud_rate = 115200           # Baud rate

# Initialize serial communication
ser = serial.Serial(serial_port, baud_rate, timeout=1)

# Initialize variables for tracking data transmission rate
line_count = 0
start_time = time.time()

# Set up the plot
plt.ion()  # Enable interactive mode
fig, ax = plt.subplots()
robot_radius = 10  # Radius of the robot for visualization

# Draw robot at the center
robot_circle = plt.Circle((0, 0), robot_radius, color='blue', label="Robot")
ax.add_artist(robot_circle)
ax.set_xlim(-200, 200)  # Set plot limits (adjust for your environment)
ax.set_ylim(-200, 200)
ax.set_aspect('equal', adjustable='datalim')
ax.grid(True)
ax.legend()

# Function to update the plot with walls or obstacles
def update_environment(distances):
    ax.clear()
    # Draw the robot again
    ax.add_artist(robot_circle)

    # Plot walls based on distances
    if "F" in distances:
        ax.plot([0, 0], [robot_radius, distances["F"]], 'r-', label="Front Wall")
    if "B" in distances:
        ax.plot([0, 0], [-robot_radius, -distances["B"]], 'g-', label="Back Wall")
    if "L" in distances:
        ax.plot([-robot_radius, -distances["L"]], [0, 0], 'b-', label="Left Wall")
    if "R" in distances:
        ax.plot([robot_radius, distances["R"]], [0, 0], 'm-', label="Right Wall")
    
    # Set plot limits and re-draw
    ax.set_xlim(-200, 200)
    ax.set_ylim(-200, 200)
    ax.set_aspect('equal', adjustable='datalim')
    ax.grid(True)
    ax.legend()
    plt.draw()
    plt.pause(0.01)

# Function to send JSON data
def send_data(fl, fr, bl, br):
    data = {
        "FL": fl,
        "FR": fr,
        "BL": bl,
        "BR": br
    }
    json_data = json.dumps(data)
    ser.write((json_data + "\n").encode('utf-8'))

# Function to read and parse incoming serial data
def read_and_parse_serial():
    global line_count, start_time
    try:
        line = ser.readline().decode('utf-8').strip()
        if line:
            line_count += 1
            data = json.loads(line)
            
            # Extract distance data
            distances = {
                "F": data['distance']['F'],
                "B": data['distance']['B'],
                "L": data['distance']['L'],
                "R": data['distance']['R']
            }
            
            # Display distances
            print(f"Distances - F: {distances['F']} B: {distances['B']} L: {distances['L']} R: {distances['R']}")
            
            # Update the plot
            update_environment(distances)

            # Calculate transmission rate every 5 seconds
            elapsed_time = time.time() - start_time
            if elapsed_time >= 5:
                transmission_rate = line_count / elapsed_time
                print(f"Transmission Rate: {transmission_rate:.2f} lines/sec")
                line_count = 0
                start_time = time.time()
        else:
            print("No data received.")
    except json.JSONDecodeError:
        print("Invalid JSON received.")
    except KeyError as e:
        print(f"Missing data in JSON: {e}")

# Main loop to send and receive data
def main():
    print("Starting UART communication and plotting...")
    iteration_counter = 0
    start_time_iter = time.time()

    try:
        while True:
            # Read and parse incoming data
            read_and_parse_serial()
            
            # Example values for FL, FR, BL, BR to send
            fl = 222  # Replace with actual value
            fr = -100 # Replace with actual value
            bl = 180  # Replace with actual value
            br = -50  # Replace with actual value
            
            # Send data periodically
            send_data(fl, fr, bl, br)
            
            # Calculate and print iteration speed (iterations per second)
            iteration_counter += 1
            elapsed_iter_time = time.time() - start_time_iter
            if elapsed_iter_time >= 1:  # Print every 1 second
                iterations_per_second = iteration_counter / elapsed_iter_time
                print(f"Iteration Speed: {iterations_per_second:.2f} iterations/sec")
                iteration_counter = 0
                start_time_iter = time.time()

            # Sleep for a short time to allow other tasks
            time.sleep(0.01)

    except KeyboardInterrupt:
        print("Stopping communication and plotting...")
    finally:
        ser.close()

if __name__ == "__main__":
    main()






________________________________________________________________








import serial
import json
import time

# Configure UART
serial_port = "/dev/ttyAMA0"  # UART port
baud_rate = 115200           # Baud rate

# Initialize serial communication
ser = serial.Serial(serial_port, baud_rate, timeout=1)

# Initialize variables for tracking data transmission rate
line_count = 0
start_time = time.time()

# Declare global variables for sensor data
distance_f = None
distance_b = None
distance_l = None
distance_r = None
gyro_x = None
gyro_y = None
gyro_z = None
accel_x = None
accel_y = None
accel_z = None
encoderPos_1 = None
encoderPos_2 = None
encoderPos_3 = None
encoderPos_4 = None
rotation_1 = None
rotation_2 = None
rotation_3 = None
rotation_4 = None
temperature = None
humidity = None

# Function to send JSON data
def send_data(fl, fr, bl, br):
    # Create a dictionary with the variables
    data = {
        "FL": fl,
        "FR": fr,
        "BL": bl,
        "BR": br
    }
    # Convert dictionary to JSON string
    json_data = json.dumps(data)
    # Send JSON string over UART
    ser.write((json_data + "\n").encode('utf-8'))

# Function to read and parse incoming serial data
def read_and_parse_serial():
    global distance_f, distance_b, distance_l, distance_r
    global gyro_x, gyro_y, gyro_z
    global accel_x, accel_y, accel_z
    global encoderPos_1, encoderPos_2, encoderPos_3, encoderPos_4
    global rotation_1, rotation_2, rotation_3, rotation_4
    global temperature, humidity
    global line_count, start_time  # Declare start_time as global
    try:
        # Read a line of data from the serial port
        line = ser.readline().decode('utf-8').strip()
        
        if line:  # Ensure the line is not empty
            line_count += 1  # Increment the line counter

            # Parse JSON data
            data = json.loads(line)
            
            # Extract various sensor data (adjust to match your actual structure)
            distance_f = data['distance']['F']
            distance_b = data['distance']['B']
            distance_l = data['distance']['L']
            distance_r = data['distance']['R']
            
            gyro_x = data['gyro']['x']
            gyro_y = data['gyro']['y']
            gyro_z = data['gyro']['z']
            
            accel_x = data['accel']['x']
            accel_y = data['accel']['y']
            accel_z = data['accel']['z']
            
            encoderPos_1 = data['enco']['1']['position']
            encoderPos_2 = data['enco']['2']['position']
            encoderPos_3 = data['enco']['3']['position']
            encoderPos_4 = data['enco']['4']['position']
            rotation_1 = data['enco']['1']['rotation']
            rotation_2 = data['enco']['2']['rotation']
            rotation_3 = data['enco']['3']['rotation']
            rotation_4 = data['enco']['4']['rotation']

            temperature = data['environment']['temperature']
            humidity = data['environment']['humidity']
            
            # Print parsed data
            print(f"Distances - L: {distance_l}, R: {distance_r}, B: {distance_b}, F: {distance_f}")
            print(f"Gyro - X: {gyro_x}, Y: {gyro_y}, Z: {gyro_z}")
            print(f"Accel - X: {accel_x}, Y: {accel_y}, Z: {accel_z}")
            print(f"Encoder 1 - Position: {encoderPos_1}, Rotation: {rotation_1}")
            print(f"Encoder 2 - Position: {encoderPos_2}, Rotation: {rotation_2}")
            print(f"Encoder 3 - Position: {encoderPos_3}, Rotation: {rotation_3}")
            print(f"Encoder 4 - Position: {encoderPos_4}, Rotation: {rotation_4}")
            print(f"Environment - Temperature: {temperature}°C, Humidity: {humidity}%")

            # Calculate and display transmission rate every 5 seconds
            elapsed_time = time.time() - start_time
            if elapsed_time >= 5:
                transmission_rate = line_count / elapsed_time  # Lines per second
                print(f"Data Transmission Rate: {transmission_rate:.2f} lines per second")
                line_count = 0
                start_time = time.time()

        else:
            print("No data received.")
    except json.JSONDecodeError:
        print("Error: Received invalid JSON data.")
    except KeyError as e:
        print(f"Error: Missing key in JSON data - {e}")

# Function to create wheel speeds based on sensor data
def create_instruction():
    global distance_f, distance_b, distance_l, distance_r

    # Set the stop distances (in cm) as thresholds
    stopDistance1 = 10  # Stop distance 1 (very close to obstacle)
    stopDistance2 = 20  # Stop distance 2 (approaching)
    stopDistance3 = 30  # Stop distance 3 (far from obstacle)
    setSpeed = 100  # Base speed for the wheels (adjust as needed)

    # Initialize speeds for the wheels
    fl = fr = bl = br = setSpeed

    # Check distances and decide movement
    if distance_f > stopDistance3:  # Far from obstacle (> 30 cm)
        # Full speed forward
        fl = fr = bl = br = setSpeed
        print("Moving forward at full speed")
    elif distance_f > stopDistance2:  # Approaching obstacle (20-10 cm)
        # Slow down
        fl = fr = bl = br = setSpeed - 50
        print("Slowing down: Near stopDistance3")
    elif distance_f > stopDistance1:  # Very close to obstacle (10 cm to stop distance)
        # Slow down further
        fl = fr = bl = br = setSpeed - 75
        print("Slowing down further: Near stopDistance2")
    else:  # At stop distance
        # Reverse
        fl = fr = bl = br = -setSpeed
        print("Reversing")
        time.sleep(0.5)  # Reverse for 0.5 seconds

        # Compare left and right distances to determine rotation direction
        if distance_r > distance_l:
            # Rotate clockwise
            fl = br = setSpeed
            fr = bl = -setSpeed
            print("Rotating clockwise (Left is farther)")
        elif distance_l > distance_r:
            # Rotate counterclockwise
            fl = bl = -setSpeed
            fr = br = setSpeed
            print("Rotating counterclockwise (Right is farther)")
        else:
            print("Distances equal, moving forward")

        time.sleep(0.5)  # Allow time to rotate
        # Move forward again
        fl = fr = bl = br = setSpeed
        print("Moving forward after rotation")

    # Return the calculated speeds
    return fl, fr, bl, br


# Main loop to send and receive data
def main():
    print("Starting UART communication...")
    iteration_counter = 0  # Counter for iterations
    start_time_iter = time.time()  # Track start time for iteration speed calculation

    try:
        while True:
            # Read and parse incoming data
            read_and_parse_serial()
            
            # Create instruction based on sensor data
            fl, fr, bl, br = create_instruction()
            
            # Send data periodically
            send_data(fl, fr, bl, br)
            
            # Calculate and print iteration speed (iterations per second)
            iteration_counter += 1
            elapsed_iter_time = time.time() - start_time_iter
            if elapsed_iter_time >= 1:  # Print every 1 second
                iterations_per_second = iteration_counter / elapsed_iter_time
                print(f"****************Iteration Speed: {iterations_per_second:.2f} iterations per second")
                print(f"Total Iterations: {iteration_counter}")
                iteration_counter = 0
                start_time_iter = time.time()

            # Sleep for a short time to allow other tasks
            time.sleep(0.01)  # Adjust as needed for your application

    except KeyboardInterrupt:
        print("Stopping communication...")
    finally:
        ser.close()

if __name__ == "__main__":
    main()


