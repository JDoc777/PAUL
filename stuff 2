import serial
import json
import time

# Configure UART
serial_port = "/dev/ttyAMA0"  # UART port
baud_rate = 250000           # Baud rate

# Initialize serial communication
ser = serial.Serial(serial_port, baud_rate, timeout=1)

# Initialize variables for tracking data transmission rate
line_count = 0
start_time = time.time()

# Function to send JSON data
def send_data(fl, fr, bl, br):
    data = {
        "FL": fl,
        "FR": fr,
        "BL": bl,
        "BR": br
    }
    json_data = json.dumps(data)
    ser.write((json_data + "\n").encode('utf-8'))

# Function to read and parse incoming serial data
def read_and_parse_serial():
    global line_count, start_time
    try:
        if ser.in_waiting > 0:
            line = ser.readline().decode('utf-8').strip()
            if line:
                line_count += 1
                data = json.loads(line)

                # Parse data
                parsed_data = {
                    "Distances": data['distance'],
                    "Gyro": data['gyro'],
                    "Accel": data['accel'],
                    "Encoders": data['enco'],
                    "Environment": data['environment']
                }
                return parsed_data
    except json.JSONDecodeError:
        print("Error: Received invalid JSON data.")
    except KeyError as e:
        print(f"Error: Missing key in JSON data - {e}")
    return None

# Main loop to send and receive data
def main():
    print("Starting UART communication...")
    iteration_counter = 0
    start_time_iter = time.time()
    start_time_print = time.time()  # For periodic status updates

    try:
        while True:
            # Read and parse incoming data
            parsed_data = read_and_parse_serial()

            # Example values for FL, FR, BL, BR
            fl = 222
            fr = -100
            bl = 180
            br = -50

            # Send data periodically
            send_data(fl, fr, bl, br)

            # Count iterations
            iteration_counter += 1

            # Print iteration speed every second
            elapsed_iter_time = time.time() - start_time_iter
            if elapsed_iter_time >= 1:
                iterations_per_second = iteration_counter / elapsed_iter_time
                print(f"\n**************** Iteration Speed: {iterations_per_second:.2f} iterations per second")
                iteration_counter = 0
                start_time_iter = time.time()

            # Print detailed data every 5 seconds
            elapsed_time_print = time.time() - start_time_print
            if elapsed_time_print >= 5:
                if parsed_data:
                    print("\n===== Status Update =====")
                    print(f"Distances: {parsed_data['Distances']}")
                    print(f"Gyro: {parsed_data['Gyro']}")
                    print(f"Accel: {parsed_data['Accel']}")
                    encos = parsed_data['Encoders']
                    for i in range(1, 5):
                        print(f"Encoder {i} - Position: {encos[str(i)]['position']}, Rotation: {encos[str(i)]['rotation']}")
                    print(f"Environment - Temperature: {parsed_data['Environment']['temperature']}Â°C, "
                          f"Humidity: {parsed_data['Environment']['humidity']}%")
                    
                    transmission_rate = line_count / elapsed_time_print
                    print(f"Data Transmission Rate: {transmission_rate:.2f} lines per second")
                    print("=========================\n")

                line_count = 0
                start_time_print = time.time()

            time.sleep(0.001)  # Adjust for system responsiveness

    except KeyboardInterrupt:
        print("Stopping communication...")
    finally:
        ser.close()

if __name__ == "__main__":
    main()
